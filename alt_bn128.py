# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _alt_bn128
else:
    import _alt_bn128

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Ft(object):
    r"""Proxy of C++ Ft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Ft self) -> Ft"""
        _alt_bn128.Ft_swiginit(self, _alt_bn128.new_Ft())
    __swig_destroy__ = _alt_bn128.delete_Ft

# Register Ft in _alt_bn128:
_alt_bn128.Ft_swigregister(Ft)


def fieldinverse(val):
    r"""fieldinverse(Ft val) -> Ft"""
    return _alt_bn128.fieldinverse(val)

def get_modulus():
    r"""get_modulus() -> libff::bigint< Ft::num_limbs >"""
    return _alt_bn128.get_modulus()
class Variable(object):
    r"""Proxy of C++ libsnark::variable< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_alt_bn128.Variable_index_get, _alt_bn128.Variable_index_set, doc=r"""index : var_index_t""")

    def __init__(self):
        r"""__init__(Variable self) -> Variable"""
        _alt_bn128.Variable_swiginit(self, _alt_bn128.new_Variable())
    __swig_destroy__ = _alt_bn128.delete_Variable

# Register Variable in _alt_bn128:
_alt_bn128.Variable_swigregister(Variable)

class PbVariable(Variable):
    r"""Proxy of C++ libsnark::pb_variable< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PbVariable self) -> PbVariable"""
        _alt_bn128.PbVariable_swiginit(self, _alt_bn128.new_PbVariable())

    def allocate(self, *args):
        r"""allocate(PbVariable self, Protoboard pb, std::string const & annotation="")"""
        return _alt_bn128.PbVariable_allocate(self, *args)
    __swig_destroy__ = _alt_bn128.delete_PbVariable

# Register PbVariable in _alt_bn128:
_alt_bn128.PbVariable_swigregister(PbVariable)

class LinearCombination(object):
    r"""Proxy of C++ libsnark::linear_combination< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LinearCombination self) -> LinearCombination
        __init__(LinearCombination self, Ft field_coeff) -> LinearCombination
        __init__(LinearCombination self, PbVariable var) -> LinearCombination
        """
        _alt_bn128.LinearCombination_swiginit(self, _alt_bn128.new_LinearCombination(*args))

    def __mul__(self, field_coeff):
        r"""__mul__(LinearCombination self, Ft field_coeff) -> LinearCombination"""
        return _alt_bn128.LinearCombination___mul__(self, field_coeff)

    def __add__(self, other):
        r"""__add__(LinearCombination self, LinearCombination other) -> LinearCombination"""
        return _alt_bn128.LinearCombination___add__(self, other)

    def __sub__(self, other):
        r"""__sub__(LinearCombination self, LinearCombination other) -> LinearCombination"""
        return _alt_bn128.LinearCombination___sub__(self, other)

    def __neg__(self):
        r"""__neg__(LinearCombination self) -> LinearCombination"""
        return _alt_bn128.LinearCombination___neg__(self)
    __swig_destroy__ = _alt_bn128.delete_LinearCombination

# Register LinearCombination in _alt_bn128:
_alt_bn128.LinearCombination_swigregister(LinearCombination)

class R1csConstraint(object):
    r"""Proxy of C++ libsnark::r1cs_constraint< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_alt_bn128.R1csConstraint_a_get, _alt_bn128.R1csConstraint_a_set, doc=r"""a : libsnark::linear_combination<(Ft)>""")
    b = property(_alt_bn128.R1csConstraint_b_get, _alt_bn128.R1csConstraint_b_set, doc=r"""b : libsnark::linear_combination<(Ft)>""")
    c = property(_alt_bn128.R1csConstraint_c_get, _alt_bn128.R1csConstraint_c_set, doc=r"""c : libsnark::linear_combination<(Ft)>""")

    def __init__(self, a, b, c):
        r"""__init__(R1csConstraint self, LinearCombination a, LinearCombination b, LinearCombination c) -> R1csConstraint"""
        _alt_bn128.R1csConstraint_swiginit(self, _alt_bn128.new_R1csConstraint(a, b, c))
    __swig_destroy__ = _alt_bn128.delete_R1csConstraint

# Register R1csConstraint in _alt_bn128:
_alt_bn128.R1csConstraint_swigregister(R1csConstraint)

class R1csConstraintSystem(object):
    r"""Proxy of C++ libsnark::r1cs_constraint_system< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(R1csConstraintSystem self) -> R1csConstraintSystem"""
        _alt_bn128.R1csConstraintSystem_swiginit(self, _alt_bn128.new_R1csConstraintSystem())
    __swig_destroy__ = _alt_bn128.delete_R1csConstraintSystem

# Register R1csConstraintSystem in _alt_bn128:
_alt_bn128.R1csConstraintSystem_swigregister(R1csConstraintSystem)

class R1csPrimaryInput(object):
    r"""Proxy of C++ libsnark::r1cs_primary_input< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def size(self):
        r"""size(R1csPrimaryInput self) -> int"""
        return _alt_bn128.R1csPrimaryInput_size(self)

    def at(self, index):
        r"""at(R1csPrimaryInput self, int index) -> Ft"""
        return _alt_bn128.R1csPrimaryInput_at(self, index)

    def __init__(self):
        r"""__init__(R1csPrimaryInput self) -> R1csPrimaryInput"""
        _alt_bn128.R1csPrimaryInput_swiginit(self, _alt_bn128.new_R1csPrimaryInput())
    __swig_destroy__ = _alt_bn128.delete_R1csPrimaryInput

# Register R1csPrimaryInput in _alt_bn128:
_alt_bn128.R1csPrimaryInput_swigregister(R1csPrimaryInput)

class R1csAuxiliaryInput(object):
    r"""Proxy of C++ libsnark::r1cs_auxiliary_input< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def size(self):
        r"""size(R1csAuxiliaryInput self) -> int"""
        return _alt_bn128.R1csAuxiliaryInput_size(self)

    def at(self, index):
        r"""at(R1csAuxiliaryInput self, int index) -> Ft"""
        return _alt_bn128.R1csAuxiliaryInput_at(self, index)

    def __init__(self):
        r"""__init__(R1csAuxiliaryInput self) -> R1csAuxiliaryInput"""
        _alt_bn128.R1csAuxiliaryInput_swiginit(self, _alt_bn128.new_R1csAuxiliaryInput())
    __swig_destroy__ = _alt_bn128.delete_R1csAuxiliaryInput

# Register R1csAuxiliaryInput in _alt_bn128:
_alt_bn128.R1csAuxiliaryInput_swigregister(R1csAuxiliaryInput)

class Protoboard(object):
    r"""Proxy of C++ libsnark::protoboard< Ft > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Protoboard self) -> Protoboard"""
        _alt_bn128.Protoboard_swiginit(self, _alt_bn128.new_Protoboard())

    def val(self, var):
        r"""val(Protoboard self, PbVariable var) -> Ft"""
        return _alt_bn128.Protoboard_val(self, var)

    def add_r1cs_constraint(self, *args):
        r"""add_r1cs_constraint(Protoboard self, R1csConstraint constr, std::string const & annotation="")"""
        return _alt_bn128.Protoboard_add_r1cs_constraint(self, *args)

    def is_satisfied(self):
        r"""is_satisfied(Protoboard self) -> bool"""
        return _alt_bn128.Protoboard_is_satisfied(self)

    def dump_variables(self):
        r"""dump_variables(Protoboard self)"""
        return _alt_bn128.Protoboard_dump_variables(self)

    def num_constraints(self):
        r"""num_constraints(Protoboard self) -> size_t"""
        return _alt_bn128.Protoboard_num_constraints(self)

    def num_inputs(self):
        r"""num_inputs(Protoboard self) -> size_t"""
        return _alt_bn128.Protoboard_num_inputs(self)

    def num_variables(self):
        r"""num_variables(Protoboard self) -> size_t"""
        return _alt_bn128.Protoboard_num_variables(self)

    def set_input_sizes(self, primary_input_size):
        r"""set_input_sizes(Protoboard self, size_t const primary_input_size)"""
        return _alt_bn128.Protoboard_set_input_sizes(self, primary_input_size)

    def primary_input(self):
        r"""primary_input(Protoboard self) -> R1csPrimaryInput"""
        return _alt_bn128.Protoboard_primary_input(self)

    def auxiliary_input(self):
        r"""auxiliary_input(Protoboard self) -> R1csAuxiliaryInput"""
        return _alt_bn128.Protoboard_auxiliary_input(self)

    def get_constraint_system(self):
        r"""get_constraint_system(Protoboard self) -> R1csConstraintSystem"""
        return _alt_bn128.Protoboard_get_constraint_system(self)

    def setval(self, varn, valu):
        r"""setval(Protoboard self, PbVariable varn, Ft valu)"""
        return _alt_bn128.Protoboard_setval(self, varn, valu)
    __swig_destroy__ = _alt_bn128.delete_Protoboard

# Register Protoboard in _alt_bn128:
_alt_bn128.Protoboard_swigregister(Protoboard)

class ProtoboardPub(Protoboard):
    r"""Proxy of C++ ProtoboardPub class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setpublic(self, var):
        r"""setpublic(ProtoboardPub self, PbVariable var)"""
        return _alt_bn128.ProtoboardPub_setpublic(self, var)

    def get_constraint_system_pubs(self):
        r"""get_constraint_system_pubs(ProtoboardPub self) -> R1csConstraintSystem"""
        return _alt_bn128.ProtoboardPub_get_constraint_system_pubs(self)

    def primary_input_pubs(self):
        r"""primary_input_pubs(ProtoboardPub self) -> R1csPrimaryInput"""
        return _alt_bn128.ProtoboardPub_primary_input_pubs(self)

    def auxiliary_input_pubs(self):
        r"""auxiliary_input_pubs(ProtoboardPub self) -> R1csAuxiliaryInput"""
        return _alt_bn128.ProtoboardPub_auxiliary_input_pubs(self)

    def __init__(self):
        r"""__init__(ProtoboardPub self) -> ProtoboardPub"""
        _alt_bn128.ProtoboardPub_swiginit(self, _alt_bn128.new_ProtoboardPub())
    __swig_destroy__ = _alt_bn128.delete_ProtoboardPub

# Register ProtoboardPub in _alt_bn128:
_alt_bn128.ProtoboardPub_swigregister(ProtoboardPub)

class ZKProof(object):
    r"""Proxy of C++ libsnark::r1cs_ppzksnark_proof< libff::alt_bn128_pp > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZKProof self) -> ZKProof"""
        _alt_bn128.ZKProof_swiginit(self, _alt_bn128.new_ZKProof())
    __swig_destroy__ = _alt_bn128.delete_ZKProof

# Register ZKProof in _alt_bn128:
_alt_bn128.ZKProof_swigregister(ZKProof)

class ZKKeypair(object):
    r"""Proxy of C++ libsnark::r1cs_ppzksnark_keypair< libff::alt_bn128_pp > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pk = property(_alt_bn128.ZKKeypair_pk_get, _alt_bn128.ZKKeypair_pk_set, doc=r"""pk : libsnark::r1cs_ppzksnark_proving_key<(libff::alt_bn128_pp)>""")
    vk = property(_alt_bn128.ZKKeypair_vk_get, _alt_bn128.ZKKeypair_vk_set, doc=r"""vk : libsnark::r1cs_ppzksnark_verification_key<(libff::alt_bn128_pp)>""")

    def __init__(self, other):
        r"""__init__(ZKKeypair self, ZKKeypair other) -> ZKKeypair"""
        _alt_bn128.ZKKeypair_swiginit(self, _alt_bn128.new_ZKKeypair(other))
    __swig_destroy__ = _alt_bn128.delete_ZKKeypair

# Register ZKKeypair in _alt_bn128:
_alt_bn128.ZKKeypair_swigregister(ZKKeypair)


def zk_generator(cs):
    r"""zk_generator(R1csConstraintSystem cs) -> ZKKeypair"""
    return _alt_bn128.zk_generator(cs)

def zk_prover(pk, primary_input, auxiliary_input):
    r"""zk_prover(libsnark::r1cs_ppzksnark_proving_key< libff::alt_bn128_pp > const & pk, R1csPrimaryInput primary_input, R1csAuxiliaryInput auxiliary_input) -> ZKProof"""
    return _alt_bn128.zk_prover(pk, primary_input, auxiliary_input)

def zk_verifier_weak_IC(vk, primary_input, proof):
    r"""zk_verifier_weak_IC(libsnark::r1cs_ppzksnark_verification_key< libff::alt_bn128_pp > const & vk, R1csPrimaryInput primary_input, ZKProof proof) -> bool"""
    return _alt_bn128.zk_verifier_weak_IC(vk, primary_input, proof)

def zk_verifier_strong_IC(vk, primary_input, proof):
    r"""zk_verifier_strong_IC(libsnark::r1cs_ppzksnark_verification_key< libff::alt_bn128_pp > const & vk, R1csPrimaryInput primary_input, ZKProof proof) -> bool"""
    return _alt_bn128.zk_verifier_strong_IC(vk, primary_input, proof)

def zk_read_key(ekfile, cs=None):
    r"""zk_read_key(char const * ekfile, R1csConstraintSystem cs=None) -> ZKKeypair"""
    return _alt_bn128.zk_read_key(ekfile, cs)

def zk_write_keys(keypair, vkfile=None, ekfile=None):
    r"""zk_write_keys(ZKKeypair keypair, char const * vkfile=None, char const * ekfile=None)"""
    return _alt_bn128.zk_write_keys(keypair, vkfile, ekfile)

def zk_write_proof(proof, pubvals, logfile):
    r"""zk_write_proof(ZKProof proof, R1csPrimaryInput pubvals, char const * logfile)"""
    return _alt_bn128.zk_write_proof(proof, pubvals, logfile)
class ZKGGProof(object):
    r"""Proxy of C++ libsnark::r1cs_gg_ppzksnark_proof< libff::alt_bn128_pp > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZKGGProof self) -> ZKGGProof"""
        _alt_bn128.ZKGGProof_swiginit(self, _alt_bn128.new_ZKGGProof())
    __swig_destroy__ = _alt_bn128.delete_ZKGGProof

# Register ZKGGProof in _alt_bn128:
_alt_bn128.ZKGGProof_swigregister(ZKGGProof)

class ZKGGKeypair(object):
    r"""Proxy of C++ libsnark::r1cs_gg_ppzksnark_keypair< libff::alt_bn128_pp > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pk = property(_alt_bn128.ZKGGKeypair_pk_get, _alt_bn128.ZKGGKeypair_pk_set, doc=r"""pk : libsnark::r1cs_gg_ppzksnark_proving_key<(libff::alt_bn128_pp)>""")
    vk = property(_alt_bn128.ZKGGKeypair_vk_get, _alt_bn128.ZKGGKeypair_vk_set, doc=r"""vk : libsnark::r1cs_gg_ppzksnark_verification_key<(libff::alt_bn128_pp)>""")

    def __init__(self, other):
        r"""__init__(ZKGGKeypair self, ZKGGKeypair other) -> ZKGGKeypair"""
        _alt_bn128.ZKGGKeypair_swiginit(self, _alt_bn128.new_ZKGGKeypair(other))
    __swig_destroy__ = _alt_bn128.delete_ZKGGKeypair

# Register ZKGGKeypair in _alt_bn128:
_alt_bn128.ZKGGKeypair_swigregister(ZKGGKeypair)


def zkgg_generator(cs):
    r"""zkgg_generator(R1csConstraintSystem cs) -> ZKGGKeypair"""
    return _alt_bn128.zkgg_generator(cs)

def zkgg_prover(pk, primary_input, auxiliary_input):
    r"""zkgg_prover(libsnark::r1cs_gg_ppzksnark_proving_key< libff::alt_bn128_pp > const & pk, R1csPrimaryInput primary_input, R1csAuxiliaryInput auxiliary_input) -> ZKGGProof"""
    return _alt_bn128.zkgg_prover(pk, primary_input, auxiliary_input)

def zkgg_verifier_weak_IC(vk, primary_input, proof):
    r"""zkgg_verifier_weak_IC(libsnark::r1cs_gg_ppzksnark_verification_key< libff::alt_bn128_pp > const & vk, R1csPrimaryInput primary_input, ZKGGProof proof) -> bool"""
    return _alt_bn128.zkgg_verifier_weak_IC(vk, primary_input, proof)

def zkgg_verifier_strong_IC(vk, primary_input, proof):
    r"""zkgg_verifier_strong_IC(libsnark::r1cs_gg_ppzksnark_verification_key< libff::alt_bn128_pp > const & vk, R1csPrimaryInput primary_input, ZKGGProof proof) -> bool"""
    return _alt_bn128.zkgg_verifier_strong_IC(vk, primary_input, proof)

def zkgg_read_key(ekfile, cs=None):
    r"""zkgg_read_key(char const * ekfile, R1csConstraintSystem cs=None) -> ZKGGKeypair"""
    return _alt_bn128.zkgg_read_key(ekfile, cs)

def zkgg_write_keys(keypair, vkfile=None, ekfile=None):
    r"""zkgg_write_keys(ZKGGKeypair keypair, char const * vkfile=None, char const * ekfile=None)"""
    return _alt_bn128.zkgg_write_keys(keypair, vkfile, ekfile)

def zkgg_write_proof(proof, pubvals, logfile):
    r"""zkgg_write_proof(ZKGGProof proof, R1csPrimaryInput pubvals, char const * logfile)"""
    return _alt_bn128.zkgg_write_proof(proof, pubvals, logfile)


